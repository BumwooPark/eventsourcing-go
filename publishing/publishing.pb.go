// Code generated by protoc-gen-go. DO NOT EDIT.
// source: publishing.proto

/*
Package publishing is a generated protocol buffer package.

It is generated from these files:
	publishing.proto

It has these top-level messages:
	ArticleRequest
	ArticleReply
	ArticlesReply
	CreateArticleRequest
	UpdateArticleRequest
	LatestArticlesRequest
	Article
*/
package publishing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArticleStatus int32

const (
	ArticleStatus_UNKNOWN   ArticleStatus = 0
	ArticleStatus_DRAFT     ArticleStatus = 1
	ArticleStatus_PUBLISHED ArticleStatus = 2
	ArticleStatus_RETRACTED ArticleStatus = 3
)

var ArticleStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "DRAFT",
	2: "PUBLISHED",
	3: "RETRACTED",
}
var ArticleStatus_value = map[string]int32{
	"UNKNOWN":   0,
	"DRAFT":     1,
	"PUBLISHED": 2,
	"RETRACTED": 3,
}

func (x ArticleStatus) String() string {
	return proto.EnumName(ArticleStatus_name, int32(x))
}
func (ArticleStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ArticleRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ArticleRequest) Reset()                    { *m = ArticleRequest{} }
func (m *ArticleRequest) String() string            { return proto.CompactTextString(m) }
func (*ArticleRequest) ProtoMessage()               {}
func (*ArticleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ArticleRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ArticleReply struct {
	Article *Article `protobuf:"bytes,1,opt,name=article" json:"article,omitempty"`
}

func (m *ArticleReply) Reset()                    { *m = ArticleReply{} }
func (m *ArticleReply) String() string            { return proto.CompactTextString(m) }
func (*ArticleReply) ProtoMessage()               {}
func (*ArticleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArticleReply) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

type ArticlesReply struct {
	Articles []*Article `protobuf:"bytes,1,rep,name=articles" json:"articles,omitempty"`
}

func (m *ArticlesReply) Reset()                    { *m = ArticlesReply{} }
func (m *ArticlesReply) String() string            { return proto.CompactTextString(m) }
func (*ArticlesReply) ProtoMessage()               {}
func (*ArticlesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ArticlesReply) GetArticles() []*Article {
	if m != nil {
		return m.Articles
	}
	return nil
}

type CreateArticleRequest struct {
	Article *Article `protobuf:"bytes,1,opt,name=article" json:"article,omitempty"`
}

func (m *CreateArticleRequest) Reset()                    { *m = CreateArticleRequest{} }
func (m *CreateArticleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateArticleRequest) ProtoMessage()               {}
func (*CreateArticleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateArticleRequest) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

type UpdateArticleRequest struct {
	Article *Article `protobuf:"bytes,1,opt,name=article" json:"article,omitempty"`
}

func (m *UpdateArticleRequest) Reset()                    { *m = UpdateArticleRequest{} }
func (m *UpdateArticleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateArticleRequest) ProtoMessage()               {}
func (*UpdateArticleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateArticleRequest) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

type LatestArticlesRequest struct {
	Status   ArticleStatus `protobuf:"varint,1,opt,name=status,enum=publishing.ArticleStatus" json:"status,omitempty"`
	Count    uint32        `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Category string        `protobuf:"bytes,3,opt,name=category" json:"category,omitempty"`
}

func (m *LatestArticlesRequest) Reset()                    { *m = LatestArticlesRequest{} }
func (m *LatestArticlesRequest) String() string            { return proto.CompactTextString(m) }
func (*LatestArticlesRequest) ProtoMessage()               {}
func (*LatestArticlesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LatestArticlesRequest) GetStatus() ArticleStatus {
	if m != nil {
		return m.Status
	}
	return ArticleStatus_UNKNOWN
}

func (m *LatestArticlesRequest) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LatestArticlesRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type Article struct {
	Id         uint32                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title      string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Body       string                     `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Category   string                     `protobuf:"bytes,4,opt,name=category" json:"category,omitempty"`
	AuthorId   uint32                     `protobuf:"varint,5,opt,name=author_id,json=authorId" json:"author_id,omitempty"`
	AuthorName string                     `protobuf:"bytes,6,opt,name=author_name,json=authorName" json:"author_name,omitempty"`
	Created    *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=created" json:"created,omitempty"`
	Modified   *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=modified" json:"modified,omitempty"`
	Status     ArticleStatus              `protobuf:"varint,9,opt,name=status,enum=publishing.ArticleStatus" json:"status,omitempty"`
}

func (m *Article) Reset()                    { *m = Article{} }
func (m *Article) String() string            { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()               {}
func (*Article) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Article) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Article) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Article) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Article) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Article) GetAuthorId() uint32 {
	if m != nil {
		return m.AuthorId
	}
	return 0
}

func (m *Article) GetAuthorName() string {
	if m != nil {
		return m.AuthorName
	}
	return ""
}

func (m *Article) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Article) GetModified() *google_protobuf.Timestamp {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *Article) GetStatus() ArticleStatus {
	if m != nil {
		return m.Status
	}
	return ArticleStatus_UNKNOWN
}

func init() {
	proto.RegisterType((*ArticleRequest)(nil), "publishing.ArticleRequest")
	proto.RegisterType((*ArticleReply)(nil), "publishing.ArticleReply")
	proto.RegisterType((*ArticlesReply)(nil), "publishing.ArticlesReply")
	proto.RegisterType((*CreateArticleRequest)(nil), "publishing.CreateArticleRequest")
	proto.RegisterType((*UpdateArticleRequest)(nil), "publishing.UpdateArticleRequest")
	proto.RegisterType((*LatestArticlesRequest)(nil), "publishing.LatestArticlesRequest")
	proto.RegisterType((*Article)(nil), "publishing.Article")
	proto.RegisterEnum("publishing.ArticleStatus", ArticleStatus_name, ArticleStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Articles service

type ArticlesClient interface {
	// Article returns a single article by ID
	Article(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error)
	// CreateArticle creates an article
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error)
	// UpdateArticle updates existing article
	UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error)
	// LatestArticles queries for latest articles by the given params
	LatestArticles(ctx context.Context, in *LatestArticlesRequest, opts ...grpc.CallOption) (*ArticlesReply, error)
}

type articlesClient struct {
	cc *grpc.ClientConn
}

func NewArticlesClient(cc *grpc.ClientConn) ArticlesClient {
	return &articlesClient{cc}
}

func (c *articlesClient) Article(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := grpc.Invoke(ctx, "/publishing.Articles/Article", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := grpc.Invoke(ctx, "/publishing.Articles/CreateArticle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := grpc.Invoke(ctx, "/publishing.Articles/UpdateArticle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) LatestArticles(ctx context.Context, in *LatestArticlesRequest, opts ...grpc.CallOption) (*ArticlesReply, error) {
	out := new(ArticlesReply)
	err := grpc.Invoke(ctx, "/publishing.Articles/LatestArticles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Articles service

type ArticlesServer interface {
	// Article returns a single article by ID
	Article(context.Context, *ArticleRequest) (*ArticleReply, error)
	// CreateArticle creates an article
	CreateArticle(context.Context, *CreateArticleRequest) (*ArticleReply, error)
	// UpdateArticle updates existing article
	UpdateArticle(context.Context, *UpdateArticleRequest) (*ArticleReply, error)
	// LatestArticles queries for latest articles by the given params
	LatestArticles(context.Context, *LatestArticlesRequest) (*ArticlesReply, error)
}

func RegisterArticlesServer(s *grpc.Server, srv ArticlesServer) {
	s.RegisterService(&_Articles_serviceDesc, srv)
}

func _Articles_Article_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).Article(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publishing.Articles/Article",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).Article(ctx, req.(*ArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publishing.Articles/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).CreateArticle(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publishing.Articles/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).UpdateArticle(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_LatestArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).LatestArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publishing.Articles/LatestArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).LatestArticles(ctx, req.(*LatestArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Articles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "publishing.Articles",
	HandlerType: (*ArticlesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Article",
			Handler:    _Articles_Article_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _Articles_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _Articles_UpdateArticle_Handler,
		},
		{
			MethodName: "LatestArticles",
			Handler:    _Articles_LatestArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publishing.proto",
}

func init() { proto.RegisterFile("publishing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x51, 0x8f, 0x93, 0x40,
	0x10, 0xc7, 0x0f, 0x7a, 0x2d, 0x30, 0xb5, 0x0d, 0x19, 0x6b, 0x82, 0xf8, 0x70, 0xc8, 0xd3, 0xc5,
	0x44, 0x1a, 0xab, 0xf1, 0xcd, 0xc4, 0x7a, 0xc5, 0x78, 0xf1, 0xac, 0x17, 0xae, 0x8d, 0x8f, 0x86,
	0x96, 0xbd, 0xde, 0x26, 0x50, 0x90, 0x5d, 0x1e, 0x9a, 0xf8, 0xd5, 0xf4, 0xb3, 0x99, 0xdb, 0x05,
	0x5a, 0x2e, 0xe8, 0x69, 0x7c, 0x63, 0x66, 0xfe, 0xfb, 0xdb, 0x61, 0xe6, 0xbf, 0x60, 0x66, 0xc5,
	0x2a, 0xa6, 0xec, 0x86, 0x6e, 0x37, 0x5e, 0x96, 0xa7, 0x3c, 0x45, 0xd8, 0x67, 0xec, 0x93, 0x4d,
	0x9a, 0x6e, 0x62, 0x32, 0x16, 0x95, 0x55, 0x71, 0x3d, 0xe6, 0x34, 0x21, 0x8c, 0x87, 0x49, 0x26,
	0xc5, 0xae, 0x03, 0xc3, 0x69, 0xce, 0xe9, 0x3a, 0x26, 0x01, 0xf9, 0x56, 0x10, 0xc6, 0x71, 0x08,
	0x2a, 0x8d, 0x2c, 0xc5, 0x51, 0x4e, 0x07, 0x81, 0x4a, 0x23, 0xf7, 0x0d, 0x3c, 0xa8, 0x15, 0x59,
	0xbc, 0xc3, 0xe7, 0xa0, 0x85, 0x32, 0x16, 0xa2, 0xfe, 0xe4, 0xa1, 0x77, 0xd0, 0x42, 0x25, 0xad,
	0x34, 0xee, 0x5b, 0x18, 0x94, 0x39, 0x26, 0xcf, 0x8f, 0x41, 0x2f, 0x6b, 0xcc, 0x52, 0x9c, 0xce,
	0xef, 0x00, 0xb5, 0xc8, 0xf5, 0x61, 0x74, 0x96, 0x93, 0x90, 0x93, 0x3b, 0x8d, 0xfe, 0x63, 0x23,
	0x3e, 0x8c, 0x96, 0x59, 0xf4, 0xdf, 0x98, 0xef, 0xf0, 0xe8, 0x22, 0xe4, 0x84, 0xf1, 0xfd, 0x5f,
	0x49, 0xce, 0x0b, 0xe8, 0x31, 0x1e, 0xf2, 0x82, 0x09, 0xcc, 0x70, 0xf2, 0xb8, 0x05, 0x73, 0x25,
	0x04, 0x41, 0x29, 0xc4, 0x11, 0x74, 0xd7, 0x69, 0xb1, 0xe5, 0x96, 0x2a, 0xa6, 0x2d, 0x03, 0xb4,
	0x41, 0x5f, 0x87, 0x9c, 0x6c, 0xd2, 0x7c, 0x67, 0x75, 0x1c, 0xe5, 0xd4, 0x08, 0xea, 0xd8, 0xfd,
	0xa9, 0x82, 0x56, 0xb2, 0xee, 0x2e, 0xea, 0x96, 0xc6, 0x29, 0x8f, 0x89, 0xa0, 0x19, 0x81, 0x0c,
	0x10, 0xe1, 0x78, 0x95, 0x46, 0x15, 0x49, 0x7c, 0x37, 0x6e, 0x38, 0x6e, 0xde, 0x80, 0x4f, 0xc0,
	0x08, 0x0b, 0x7e, 0x93, 0xe6, 0x5f, 0x69, 0x64, 0x75, 0x05, 0x5c, 0x97, 0x89, 0xf3, 0x08, 0x4f,
	0xa0, 0x5f, 0x16, 0xb7, 0x61, 0x42, 0xac, 0x9e, 0x38, 0x0b, 0x32, 0x35, 0x0f, 0x13, 0x82, 0xaf,
	0x40, 0x5b, 0x8b, 0x5d, 0x45, 0x96, 0x26, 0x86, 0x69, 0x7b, 0xd2, 0x81, 0x5e, 0xe5, 0x40, 0x6f,
	0x51, 0x39, 0x30, 0xa8, 0xa4, 0xf8, 0x1a, 0xf4, 0x24, 0x8d, 0xe8, 0x35, 0x25, 0x91, 0xa5, 0xdf,
	0x7b, 0xac, 0xd6, 0x1e, 0x8c, 0xdc, 0xf8, 0xcb, 0x91, 0x3f, 0xf3, 0x6b, 0x3b, 0xca, 0x02, 0xf6,
	0x41, 0x5b, 0xce, 0x3f, 0xce, 0x3f, 0x7f, 0x99, 0x9b, 0x47, 0x68, 0x40, 0x77, 0x16, 0x4c, 0xdf,
	0x2f, 0x4c, 0x05, 0x07, 0x60, 0x5c, 0x2e, 0xdf, 0x5d, 0x9c, 0x5f, 0x7d, 0xf0, 0x67, 0xa6, 0x7a,
	0x1b, 0x06, 0xfe, 0x22, 0x98, 0x9e, 0x2d, 0xfc, 0x99, 0xd9, 0x99, 0xfc, 0x50, 0x41, 0xaf, 0x0c,
	0x80, 0xd3, 0xfd, 0x4e, 0xec, 0x36, 0xef, 0x48, 0x83, 0xd8, 0x56, 0x6b, 0x2d, 0x8b, 0x77, 0xee,
	0x11, 0x7e, 0x82, 0x41, 0xc3, 0xe3, 0xe8, 0x1c, 0x8a, 0xdb, 0xec, 0x7f, 0x1f, 0xae, 0xe1, 0xf5,
	0x26, 0xae, 0xed, 0x19, 0xfc, 0x11, 0x77, 0x09, 0xc3, 0xa6, 0xe7, 0xf1, 0xe9, 0xa1, 0xba, 0xf5,
	0x3d, 0xd8, 0x6d, 0xcb, 0x60, 0x25, 0x71, 0xd5, 0x13, 0x7b, 0x7d, 0xf9, 0x2b, 0x00, 0x00, 0xff,
	0xff, 0xa7, 0xdd, 0xce, 0xdd, 0xbe, 0x04, 0x00, 0x00,
}
