// Code generated by protoc-gen-go. DO NOT EDIT.
// source: broker.proto

/*
Package broker is a generated protocol buffer package.

It is generated from these files:
	broker.proto

It has these top-level messages:
	SubscribeRequest
	Event
*/
package broker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubscribeRequest struct {
	Index uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubscribeRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Event struct {
	Name      string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Event     []byte                     `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Event) GetEvent() []byte {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "broker.SubscribeRequest")
	proto.RegisterType((*Event)(nil), "broker.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Broker service

type BrokerClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Broker_SendClient, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Send(ctx context.Context, opts ...grpc.CallOption) (Broker_SendClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[0], c.cc, "/broker.Broker/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerSendClient{stream}
	return x, nil
}

type Broker_SendClient interface {
	Send(*SubscribeRequest) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type brokerSendClient struct {
	grpc.ClientStream
}

func (x *brokerSendClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerSendClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Broker service

type BrokerServer interface {
	Send(Broker_SendServer) error
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Send(&brokerSendServer{stream})
}

type Broker_SendServer interface {
	Send(*Event) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type brokerSendServer struct {
	grpc.ServerStream
}

func (x *brokerSendServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerSendServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Broker_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "broker.proto",
}

func init() { proto.RegisterFile("broker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xd1, 0x4a, 0x87, 0x30,
	0x18, 0xc5, 0x5b, 0xa9, 0xe0, 0x97, 0x42, 0x8c, 0x2e, 0x86, 0x37, 0x89, 0x57, 0xbb, 0x9a, 0x61,
	0x04, 0xdd, 0x05, 0x41, 0x2f, 0x30, 0x7b, 0x01, 0x97, 0x5f, 0x22, 0xe6, 0x66, 0x73, 0x46, 0x8f,
	0x1f, 0x6e, 0xd9, 0x1f, 0xfe, 0x77, 0x3b, 0xfb, 0x0e, 0xe7, 0x77, 0x0e, 0x64, 0xca, 0x9a, 0x09,
	0xad, 0x58, 0xac, 0x71, 0x86, 0x26, 0x41, 0x15, 0x77, 0x83, 0x31, 0xc3, 0x27, 0xd6, 0xfe, 0x57,
	0x6d, 0x1f, 0xb5, 0x1b, 0x67, 0x5c, 0x5d, 0x37, 0x2f, 0xc1, 0x58, 0x71, 0xb8, 0x69, 0x37, 0xb5,
	0xbe, 0xdb, 0x51, 0xa1, 0xc4, 0xaf, 0x0d, 0x57, 0x47, 0x6f, 0x21, 0x1e, 0x75, 0x8f, 0x3f, 0x8c,
	0x94, 0x84, 0xe7, 0x32, 0x88, 0x6a, 0x82, 0xf8, 0xf5, 0x1b, 0xb5, 0xa3, 0x14, 0x22, 0xdd, 0xcd,
	0xe8, 0xaf, 0xa9, 0xf4, 0x6f, 0xfa, 0x04, 0xe9, 0x7f, 0x32, 0xbb, 0x2c, 0x09, 0xbf, 0x6e, 0x0a,
	0x11, 0xd8, 0xe2, 0x60, 0x8b, 0xb7, 0xc3, 0x21, 0x4f, 0xe6, 0x1d, 0x86, 0x7b, 0x2c, 0xbb, 0x2a,
	0x09, 0xcf, 0x64, 0x10, 0xcd, 0x33, 0x24, 0x2f, 0x7e, 0x01, 0x7d, 0x84, 0xa8, 0x45, 0xdd, 0x53,
	0x26, 0xfe, 0x06, 0x9e, 0xd7, 0x2d, 0xf2, 0xe3, 0xe2, 0xeb, 0x55, 0x17, 0x9c, 0xdc, 0x13, 0x95,
	0x78, 0xea, 0xc3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0xf9, 0x59, 0x7c, 0x17, 0x01, 0x00,
	0x00,
}
